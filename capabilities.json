{
  "builtins": [
    {
      "name": "abs",
      "decl": {
        "args": [
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``output`` is the absolute value of ``x``"
    },
    {
      "name": "all",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is ``true`` if all of the values in ``array_or_set`` are ``true``. A collection of length 0 returns ``true``"
    },
    {
      "name": "and",
      "decl": {
        "args": [
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          },
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "sets",
      "description": "``z`` is the intersection of ``x`` and ``y``",
      "infix": "\u0026"
    },
    {
      "name": "any",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is ``true`` if any of the values in ``array_or_set`` is ``true``. A collection of length 0 returns ``false``"
    },
    {
      "name": "array.concat",
      "decl": {
        "args": [
          {
            "dynamic": {
              "type": "any"
            },
            "type": "array"
          },
          {
            "dynamic": {
              "type": "any"
            },
            "type": "array"
          }
        ],
        "result": {
          "dynamic": {
            "type": "any"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "arrays",
      "description": "``output`` is the result of concatenating the two input arrays together"
    },
    {
      "name": "array.slice",
      "decl": {
        "args": [
          {
            "dynamic": {
              "type": "any"
            },
            "type": "array"
          },
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "dynamic": {
            "type": "any"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "arrays",
      "description": "``output`` is the part of the ``array`` starting from index ``x`` to ``y`` including the first index but excluding the last. If `x \u003e= y` then `output == []`. If both `x` and `y` are less than zero, `output == []`. Otherwise, `x` and `y` are clamped to 0 and `count(array)` respectively"
    },
    {
      "name": "assign",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": "",
      "infix": ":="
    },
    {
      "name": "base64.decode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "base64.encode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "base64.is_valid",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "base64url.decode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "base64url.encode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "base64url.encode_no_pad",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.and",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.lsh",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.negate",
      "decl": {
        "args": [
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.or",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.rsh",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "bits.xor",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_array",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "dynamic": {
            "type": "any"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_boolean",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_null",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "null"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_object",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "dynamic": {
            "key": {
              "type": "any"
            },
            "value": {
              "type": "any"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_set",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "cast_string",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "concat",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "of": [
              {
                "dynamic": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "string"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is the result of joining together the elements of `array_or_set` with the delimiter specified by string `x`"
    },
    {
      "name": "contains",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "true if string `x` contains `y`"
    },
    {
      "name": "count",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "key": {
                    "type": "any"
                  },
                  "value": {
                    "type": "any"
                  }
                },
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the length of the array, set, object or string provided as input"
    },
    {
      "name": "crypto.md5",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "crypto.sha1",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "crypto.sha256",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "crypto.x509.parse_certificate_request",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "any"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "crypto.x509.parse_certificates",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "div",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``z`` is the quotient of ``x`` and ``y``",
      "infix": "/"
    },
    {
      "name": "endswith",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "true if string `x` ends with `y`"
    },
    {
      "name": "eq",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": "",
      "infix": "="
    },
    {
      "name": "equal",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is equal to ``y``",
      "infix": "=="
    },
    {
      "name": "format_int",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is string representation of number `x` in the given base `y`"
    },
    {
      "name": "glob.match",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "dynamic": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "glob.quote_meta",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "graph.reachable",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "of": [
                  {
                    "of": {
                      "type": "any"
                    },
                    "type": "set"
                  },
                  {
                    "dynamic": {
                      "type": "any"
                    },
                    "type": "array"
                  }
                ],
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "of": [
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "gt",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is greater than ``y``",
      "infix": "\u003e"
    },
    {
      "name": "gte",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is greater than or equal to ``y``",
      "infix": "\u003e="
    },
    {
      "name": "hex.decode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "hex.encode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "http.send",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          }
        ],
        "result": {
          "dynamic": {
            "key": {
              "type": "any"
            },
            "value": {
              "type": "any"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "indexof",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is the index inside string `x` where `y` first occurs, or -1 if `y` does not exist"
    },
    {
      "name": "intersection",
      "decl": {
        "args": [
          {
            "of": {
              "of": {
                "type": "any"
              },
              "type": "set"
            },
            "type": "set"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "sets",
      "description": "``output`` is the intersection of the sets in the input set"
    },
    {
      "name": "io.jwt.decode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "static": [
            {
              "dynamic": {
                "key": {
                  "type": "any"
                },
                "value": {
                  "type": "any"
                }
              },
              "type": "object"
            },
            {
              "dynamic": {
                "key": {
                  "type": "any"
                },
                "value": {
                  "type": "any"
                }
              },
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.decode_verify",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          }
        ],
        "result": {
          "static": [
            {
              "type": "boolean"
            },
            {
              "dynamic": {
                "key": {
                  "type": "any"
                },
                "value": {
                  "type": "any"
                }
              },
              "type": "object"
            },
            {
              "dynamic": {
                "key": {
                  "type": "any"
                },
                "value": {
                  "type": "any"
                }
              },
              "type": "object"
            }
          ],
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.encode_sign",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.encode_sign_raw",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_es256",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_es384",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_es512",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_hs256",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_hs384",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_hs512",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_ps256",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_ps384",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_ps512",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_rs256",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_rs384",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "io.jwt.verify_rs512",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_array",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_boolean",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_null",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_number",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_object",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_set",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "is_string",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "json.filter",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "of": [
              {
                "dynamic": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is the remaining data from `object` with only keys specified in `array_or_set` which is an array or set of JSON string paths. For example: `json.filter({\"a\": {\"b\": \"x\", \"c\": \"y\"}}, [\"a/b\"])` will result in `{\"a\": {\"b\": \"x\"}}`). Paths are not filtered in-order and are deduplicated before being evaluated"
    },
    {
      "name": "json.is_valid",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "json.marshal",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "json.remove",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "of": [
              {
                "dynamic": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is a new object which is the result of removing all keys specified in `array_or_set` which is an array or set of JSON string paths. For example: `json.remove({\"a\": {\"b\": \"x\", \"c\": \"y\"}}, [\"a/b\"])` will result in `{\"a\": {\"c\": \"y\"}}`. Paths are not removed in-order and are deduplicated before being evaluated"
    },
    {
      "name": "json.unmarshal",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "lower",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is string `x` after converting to lower case"
    },
    {
      "name": "lt",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is less than ``y``",
      "infix": "\u003c"
    },
    {
      "name": "lte",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is less than or equal to ``y``",
      "infix": "\u003c="
    },
    {
      "name": "max",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the maximum value in ``array_or_set``"
    },
    {
      "name": "min",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the minimum value in ``array_or_set``"
    },
    {
      "name": "minus",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "number"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          },
          {
            "of": [
              {
                "type": "number"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "of": [
            {
              "type": "number"
            },
            {
              "of": {
                "type": "any"
              },
              "type": "set"
            }
          ],
          "type": "any"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``z`` is the difference of ``x`` and ``y``",
      "infix": "-"
    },
    {
      "name": "mul",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``z`` is the product of ``x`` and ``y``",
      "infix": "*"
    },
    {
      "name": "neq",
      "decl": {
        "args": [
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "comparisons",
      "description": "``x`` is not equal to ``y``",
      "infix": "!="
    },
    {
      "name": "net.cidr_contains",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "net.cidr_contains_matches",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "string"
              },
              {
                "dynamic": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "of": [
                      {
                        "type": "string"
                      },
                      {
                        "dynamic": {
                          "type": "any"
                        },
                        "type": "array"
                      }
                    ],
                    "type": "any"
                  }
                },
                "type": "object"
              }
            ],
            "type": "any"
          },
          {
            "of": [
              {
                "type": "string"
              },
              {
                "dynamic": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "of": [
                    {
                      "type": "string"
                    },
                    {
                      "dynamic": {
                        "type": "any"
                      },
                      "type": "array"
                    }
                  ],
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "of": [
                      {
                        "type": "string"
                      },
                      {
                        "dynamic": {
                          "type": "any"
                        },
                        "type": "array"
                      }
                    ],
                    "type": "any"
                  }
                },
                "type": "object"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "of": {
            "static": [
              {
                "type": "any"
              },
              {
                "type": "any"
              }
            ],
            "type": "array"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "net.cidr_expand",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "of": {
            "type": "string"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "net.cidr_intersects",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "net.cidr_merge",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "of": [
                    {
                      "type": "string"
                    }
                  ],
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "string"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "of": {
            "type": "string"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "net.cidr_overlap",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "numbers.range",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "dynamic": {
            "type": "number"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``output`` is the range of integer numbers between ``x`` and ``y`` (inclusive). If ``x`` == ``y`` then ``output`` == ``[x]``. If ``x`` \u003c ``y`` the range is in ascending order. If ``x`` \u003e ``y`` the range is in descending order."
    },
    {
      "name": "object.filter",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "key": {
                    "type": "any"
                  },
                  "value": {
                    "type": "any"
                  }
                },
                "type": "object"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is a new object with the remaining data from `object` with only keys specified in `array_or_set_or_object` which is an array, set, or object of keys. For example: `object.filter({\"a\": {\"b\": \"x\", \"c\": \"y\"}, \"d\": \"z\"}, [\"a\"])` will result in `{\"a\": {\"b\": \"x\", \"c\": \"y\"}}`)"
    },
    {
      "name": "object.get",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "type": "any"
          },
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is the value stored by the `object` at key `x`. If no value is found, the default value `y` is returned"
    },
    {
      "name": "object.remove",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              },
              {
                "dynamic": {
                  "key": {
                    "type": "any"
                  },
                  "value": {
                    "type": "any"
                  }
                },
                "type": "object"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is a new object which is the result of removing the keys specified in `array_or_set_or_object` from `object`. The keys must be either an array, set, or object of keys"
    },
    {
      "name": "object.union",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          },
          {
            "dynamic": {
              "key": {
                "type": "any"
              },
              "value": {
                "type": "any"
              }
            },
            "type": "object"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "objects",
      "description": "`output` is a new object which is the result of an asymmetric recursive union of two objects where conflicts are resolved by choosing the key from the right-hand object. For example: `object.union({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3}}, {\"a\": 7, \"c\": {\"d\": 4, \"e\": 5}})` will result in `{\"a\": 7, \"b\": 2, \"c\": {\"d\": 4, \"e\": 5}}`"
    },
    {
      "name": "opa.runtime",
      "decl": {
        "result": {
          "dynamic": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "any"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "or",
      "decl": {
        "args": [
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          },
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "sets",
      "description": "``z`` is the union of ``x`` and ``y``",
      "infix": "|"
    },
    {
      "name": "plus",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``z`` is the sum of ``x`` and ``y``",
      "infix": "+"
    },
    {
      "name": "product",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "number"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the product of the numbers in ``array_or_set``"
    },
    {
      "name": "re_match",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.find_all_string_submatch_n",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "dynamic": {
            "dynamic": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.find_n",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "dynamic": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.globs_match",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.is_valid",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.match",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.split",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "regex.template_match",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "rego.parse_module",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "any"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "rem",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``z`` is the remainder from the division of ``x`` and ``y``",
      "infix": "%"
    },
    {
      "name": "replace",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a `string` representing string `x` with all instances of `y` replaced by `z`"
    },
    {
      "name": "round",
      "decl": {
        "args": [
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "numbers",
      "description": "``output`` is ``x`` rounded to the nearest integer"
    },
    {
      "name": "semver.compare",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "semver.is_valid",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "set_diff",
      "decl": {
        "args": [
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          },
          {
            "of": {
              "type": "any"
            },
            "type": "set"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "sets",
      "description": "``z`` is the difference between ``x`` and ``y``, i.e., the elements in ``x`` that are not in ``y``",
      "infix": "-"
    },
    {
      "name": "sort",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "any"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "any"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "dynamic": {
            "type": "any"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the sorted ``array`` containing elements from ``array_or_set``"
    },
    {
      "name": "split",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is `array[string]` representing elements of string `x` separated by delimiter `y`"
    },
    {
      "name": "sprintf",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "dynamic": {
              "type": "any"
            },
            "type": "array"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a string representing string `x` formatted by the values in `array`"
    },
    {
      "name": "startswith",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "true if string `x` begins with `y`"
    },
    {
      "name": "strings.replace_n",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`object` is an object with old, new string key value pairs (e.g. {\"old1\": \"new1\", \"old2\": \"new2\", ...}). `output` is a `string` with all old strings inside `object` replaced by the new strings"
    },
    {
      "name": "substring",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is the portion of string `x` from index `y` and having a length of `z`. If `z` is less than zero, `z` is the remainder of the string. If index `y` is greater than the length of the string, `output` is empty. It is invalid to pass a negative offset to this function."
    },
    {
      "name": "sum",
      "decl": {
        "args": [
          {
            "of": [
              {
                "dynamic": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "of": {
                  "type": "number"
                },
                "type": "set"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "aggregates",
      "description": "``output`` is the sum of the numbers in ``array_or_set``"
    },
    {
      "name": "time.add_date",
      "decl": {
        "args": [
          {
            "type": "number"
          },
          {
            "type": "number"
          },
          {
            "type": "number"
          },
          {
            "type": "number"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.clock",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "number"
              },
              {
                "static": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "array"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "static": [
            {
              "type": "number"
            },
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.date",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "number"
              },
              {
                "static": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "array"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "static": [
            {
              "type": "number"
            },
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.now_ns",
      "decl": {
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.parse_duration_ns",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.parse_ns",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.parse_rfc3339_ns",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "time.weekday",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "number"
              },
              {
                "static": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ],
                "type": "array"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "to_number",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "trace",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "trim",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a string representing string `x` with all leading and trailing instances of the characters in `y` removed"
    },
    {
      "name": "trim_left",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a string representing string `x` with all leading instances of the characters in `y` removed"
    },
    {
      "name": "trim_prefix",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a `string` representing string `x` with leading instance of prefix `y` removed. If `x` doesn't start with `y`, `x` is returned unchanged"
    },
    {
      "name": "trim_right",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a string representing string `x` with all trailing instances of the characters in `y` removed"
    },
    {
      "name": "trim_space",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a `string` representing string `x` with all leading and trailing white space removed"
    },
    {
      "name": "trim_suffix",
      "decl": {
        "args": [
          {
            "type": "string"
          },
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is a `string` representing string `x` with trailing instance of suffix `y` removed. If `x` doesn't end with `y`, `x` is returned unchanged"
    },
    {
      "name": "type_name",
      "decl": {
        "args": [
          {
            "of": [
              {
                "type": "any"
              }
            ],
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "union",
      "decl": {
        "args": [
          {
            "of": {
              "of": {
                "type": "any"
              },
              "type": "set"
            },
            "type": "set"
          }
        ],
        "result": {
          "of": {
            "type": "any"
          },
          "type": "set"
        },
        "type": "function"
      },
      "family": "sets",
      "description": "``output`` is the union of the sets in the input set"
    },
    {
      "name": "units.parse_bytes",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "number"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "upper",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "strings",
      "description": "`output` is string `x` after converting to upper case"
    },
    {
      "name": "urlquery.decode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "urlquery.decode_object",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "dynamic": {
            "key": {
              "type": "string"
            },
            "value": {
              "dynamic": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "urlquery.encode",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "urlquery.encode_object",
      "decl": {
        "args": [
          {
            "dynamic": {
              "key": {
                "type": "string"
              },
              "value": {
                "of": [
                  {
                    "type": "string"
                  },
                  {
                    "dynamic": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  {
                    "of": {
                      "type": "string"
                    },
                    "type": "set"
                  }
                ],
                "type": "any"
              }
            },
            "type": "object"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "uuid.rfc4122",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "walk",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "static": [
            {
              "dynamic": {
                "type": "any"
              },
              "type": "array"
            },
            {
              "type": "any"
            }
          ],
          "type": "array"
        },
        "type": "function"
      },
      "family": "",
      "description": "",
      "relation": true
    },
    {
      "name": "yaml.is_valid",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "boolean"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "yaml.marshal",
      "decl": {
        "args": [
          {
            "type": "any"
          }
        ],
        "result": {
          "type": "string"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    },
    {
      "name": "yaml.unmarshal",
      "decl": {
        "args": [
          {
            "type": "string"
          }
        ],
        "result": {
          "type": "any"
        },
        "type": "function"
      },
      "family": "",
      "description": ""
    }
  ]
}
