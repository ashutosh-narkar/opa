{
  "aggregates": [
    {
      "name": "count",
      "usage": "output := count(set_or_array_or_object_or_string)",
      "description": "``output`` is the length of the object, array, set, or string provided as input",
      "wasm_support": "Native"
    },
    {
      "name": "sum",
      "usage": "output := sum(set_or_array)",
      "description": "``output`` is the sum of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "product",
      "usage": "output := product(set_or_array)",
      "description": "``output`` is the product of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "max",
      "usage": "output := max(set_or_array)",
      "description": "``output`` is the maximum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "min",
      "usage": "output := min(set_or_array)",
      "description": "``output`` is the minimum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "any",
      "usage": "output := any(set_or_array)",
      "description": "``output`` is ``true`` if any of the values in ``array_or_set`` is ``true``. A collection of length 0 returns ``false``",
      "wasm_support": "Native"
    },
    {
      "name": "all",
      "usage": "output := all(set_or_array)",
      "description": "``output`` is ``true`` if all of the values in ``array_or_set`` are ``true``. A collection of length 0 returns ``true``",
      "wasm_support": "Native"
    },
    {
      "name": "sort",
      "usage": "output := sort(array_or_set)",
      "description": "``output`` is the sorted ``array`` containing elements from ``array_or_set``",
      "wasm_support": "Native"
    }
  ],
  "arrays": [
    {
      "name": "array.concat",
      "usage": "output := array.concat(array, array)",
      "description": "``output`` is the result of concatenating the two input arrays together",
      "wasm_support": "Native"
    },
    {
      "name": "array.slice",
      "usage": "output := array.slice(array, x, y)",
      "description": "``output`` is the part of the ``array`` from ``startIndex`` to ``stopIndex`` including the first but excluding the last. If `startIndex \u003e= stopIndex` then `output == []`. If both `startIndex` and `stopIndex` are less than zero, `output == []`. Otherwise, `startIndex` and `stopIndex` are clamped to 0 and `count(array)` respectively",
      "wasm_support": "Native"
    }
  ],
  "comparisons": [
    {
      "name": "gt",
      "usage": "x \u003e y",
      "description": "``x`` is greater than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "gte",
      "usage": "x \u003e= y",
      "description": "``x`` is greater than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lt",
      "usage": "x \u003c y",
      "description": "``x`` is less than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lte",
      "usage": "x \u003c= y",
      "description": "``x`` is less than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "neq",
      "usage": "x != y",
      "description": "``x`` is not equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "equal",
      "usage": "x == y",
      "description": "``x`` is equal to ``y``",
      "wasm_support": "Native"
    }
  ],
  "numbers": [
    {
      "name": "plus",
      "usage": "z := x + y",
      "description": "``z`` is the sum of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "minus",
      "usage": "z := x - y",
      "description": "``z`` is the difference of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "mul",
      "usage": "z := x * y",
      "description": "``z`` is the product of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "div",
      "usage": "z := x / y",
      "description": "``z`` is the quotient of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "round",
      "usage": "output := round(x)",
      "description": "``output`` is ``x`` rounded to the nearest integer",
      "wasm_support": "Native"
    },
    {
      "name": "abs",
      "usage": "output := abs(x)",
      "description": "``output`` is the absolute value of ``x``",
      "wasm_support": "Native"
    },
    {
      "name": "rem",
      "usage": "z := x % y",
      "description": "``z`` is the remainder from the division of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "numbers.range",
      "usage": "output := numbers.range(x, y)",
      "description": "``output`` is the range of integer numbers between ``a`` and ``b`` (inclusive). If ``a`` == ``b`` then ``output`` == ``[a]``. If ``a`` \u003c ``b`` the range is in ascending order. If ``a`` \u003e ``b`` the range is in descending order.",
      "wasm_support": "Native"
    }
  ]
}
