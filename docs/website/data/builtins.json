{
  "aggregates": [
    {
      "name": "count",
      "usage": "output := count(array_or_set_or_object_or_string)",
      "description": "``output`` is the length of the array, set, object or string provided as input",
      "wasm_support": "Native"
    },
    {
      "name": "sum",
      "usage": "output := sum(array_or_set)",
      "description": "``output`` is the sum of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "product",
      "usage": "output := product(array_or_set)",
      "description": "``output`` is the product of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "max",
      "usage": "output := max(array_or_set)",
      "description": "``output`` is the maximum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "min",
      "usage": "output := min(array_or_set)",
      "description": "``output`` is the minimum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "any",
      "usage": "output := any(array_or_set)",
      "description": "``output`` is ``true`` if any of the values in ``array_or_set`` is ``true``. A collection of length 0 returns ``false``",
      "wasm_support": "Native"
    },
    {
      "name": "all",
      "usage": "output := all(array_or_set)",
      "description": "``output`` is ``true`` if all of the values in ``array_or_set`` are ``true``. A collection of length 0 returns ``true``",
      "wasm_support": "Native"
    },
    {
      "name": "sort",
      "usage": "output := sort(array_or_set)",
      "description": "``output`` is the sorted ``array`` containing elements from ``array_or_set``",
      "wasm_support": "Native"
    }
  ],
  "arrays": [
    {
      "name": "array.concat",
      "usage": "output := array.concat(array, array)",
      "description": "``output`` is the result of concatenating the two input arrays together",
      "wasm_support": "Native"
    },
    {
      "name": "array.slice",
      "usage": "output := array.slice(array, x, y)",
      "description": "``output`` is the part of the ``array`` starting from index ``x`` to ``y`` including the first index but excluding the last. If `x \u003e= y` then `output == []`. If both `x` and `y` are less than zero, `output == []`. Otherwise, `x` and `y` are clamped to 0 and `count(array)` respectively",
      "wasm_support": "Native"
    }
  ],
  "comparisons": [
    {
      "name": "gt",
      "usage": "x \u003e y",
      "description": "``x`` is greater than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "gte",
      "usage": "x \u003e= y",
      "description": "``x`` is greater than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lt",
      "usage": "x \u003c y",
      "description": "``x`` is less than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lte",
      "usage": "x \u003c= y",
      "description": "``x`` is less than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "neq",
      "usage": "x != y",
      "description": "``x`` is not equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "equal",
      "usage": "x == y",
      "description": "``x`` is equal to ``y``",
      "wasm_support": "Native"
    }
  ],
  "numbers": [
    {
      "name": "plus",
      "usage": "z := x + y",
      "description": "``z`` is the sum of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "minus",
      "usage": "z := x - y",
      "description": "``z`` is the difference of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "mul",
      "usage": "z := x * y",
      "description": "``z`` is the product of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "div",
      "usage": "z := x / y",
      "description": "``z`` is the quotient of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "rem",
      "usage": "z := x % y",
      "description": "``z`` is the remainder from the division of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "round",
      "usage": "output := round(x)",
      "description": "``output`` is ``x`` rounded to the nearest integer",
      "wasm_support": "Native"
    },
    {
      "name": "abs",
      "usage": "output := abs(x)",
      "description": "``output`` is the absolute value of ``x``",
      "wasm_support": "Native"
    },
    {
      "name": "numbers.range",
      "usage": "output := numbers.range(x, y)",
      "description": "``output`` is the range of integer numbers between ``x`` and ``y`` (inclusive). If ``x`` == ``y`` then ``output`` == ``[x]``. If ``x`` \u003c ``y`` the range is in ascending order. If ``x`` \u003e ``y`` the range is in descending order.",
      "wasm_support": "Native"
    }
  ],
  "sets": [
    {
      "name": "and",
      "usage": "z := x \u0026 y",
      "description": "``z`` is the intersection of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "or",
      "usage": "z := x | y",
      "description": "``z`` is the union of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "set_diff",
      "usage": "z := x - y",
      "description": "``z`` is the difference between ``x`` and ``y``, i.e., the elements in ``x`` that are not in ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "intersection",
      "usage": "output := intersection(set)",
      "description": "``output`` is the intersection of the sets in the input set",
      "wasm_support": "Native"
    },
    {
      "name": "union",
      "usage": "output := union(set)",
      "description": "``output`` is the union of the sets in the input set",
      "wasm_support": "Native"
    }
  ]
}
