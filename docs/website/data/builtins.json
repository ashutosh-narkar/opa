{
  "aggregates": [
    {
      "name": "count",
      "usage": "output := count(array_or_set_or_object_or_string)",
      "description": "``output`` is the length of the array, set, object or string provided as input",
      "wasm_support": "Native"
    },
    {
      "name": "sum",
      "usage": "output := sum(array_or_set)",
      "description": "``output`` is the sum of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "product",
      "usage": "output := product(array_or_set)",
      "description": "``output`` is the product of the numbers in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "max",
      "usage": "output := max(array_or_set)",
      "description": "``output`` is the maximum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "min",
      "usage": "output := min(array_or_set)",
      "description": "``output`` is the minimum value in ``array_or_set``",
      "wasm_support": "Native"
    },
    {
      "name": "any",
      "usage": "any(array_or_set)",
      "description": "``output`` is ``true`` if any of the values in ``array_or_set`` is ``true``. A collection of length 0 returns ``false``",
      "wasm_support": "Native"
    },
    {
      "name": "all",
      "usage": "all(array_or_set)",
      "description": "``output`` is ``true`` if all of the values in ``array_or_set`` are ``true``. A collection of length 0 returns ``true``",
      "wasm_support": "Native"
    },
    {
      "name": "sort",
      "usage": "output := sort(array_or_set)",
      "description": "``output`` is the sorted ``array`` containing elements from ``array_or_set``",
      "wasm_support": "Native"
    }
  ],
  "arrays": [
    {
      "name": "array.concat",
      "usage": "output := array.concat(array, array)",
      "description": "``output`` is the result of concatenating the two input arrays together",
      "wasm_support": "Native"
    },
    {
      "name": "array.slice",
      "usage": "output := array.slice(array, x, y)",
      "description": "``output`` is the part of the ``array`` starting from index ``x`` to ``y`` including the first index but excluding the last. If `x \u003e= y` then `output == []`. If both `x` and `y` are less than zero, `output == []`. Otherwise, `x` and `y` are clamped to 0 and `count(array)` respectively",
      "wasm_support": "Native"
    }
  ],
  "comparisons": [
    {
      "name": "gt",
      "usage": "x \u003e y",
      "description": "``x`` is greater than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "gte",
      "usage": "x \u003e= y",
      "description": "``x`` is greater than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lt",
      "usage": "x \u003c y",
      "description": "``x`` is less than ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "lte",
      "usage": "x \u003c= y",
      "description": "``x`` is less than or equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "neq",
      "usage": "x != y",
      "description": "``x`` is not equal to ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "equal",
      "usage": "x == y",
      "description": "``x`` is equal to ``y``",
      "wasm_support": "Native"
    }
  ],
  "numbers": [
    {
      "name": "plus",
      "usage": "z := x + y",
      "description": "``z`` is the sum of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "minus",
      "usage": "z := x - y",
      "description": "``z`` is the difference of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "mul",
      "usage": "z := x * y",
      "description": "``z`` is the product of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "div",
      "usage": "z := x / y",
      "description": "``z`` is the quotient of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "rem",
      "usage": "z := x % y",
      "description": "``z`` is the remainder from the division of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "round",
      "usage": "output := round(x)",
      "description": "``output`` is ``x`` rounded to the nearest integer",
      "wasm_support": "Native"
    },
    {
      "name": "abs",
      "usage": "output := abs(x)",
      "description": "``output`` is the absolute value of ``x``",
      "wasm_support": "Native"
    },
    {
      "name": "numbers.range",
      "usage": "output := numbers.range(x, y)",
      "description": "``output`` is the range of integer numbers between ``x`` and ``y`` (inclusive). If ``x`` == ``y`` then ``output`` == ``[x]``. If ``x`` \u003c ``y`` the range is in ascending order. If ``x`` \u003e ``y`` the range is in descending order.",
      "wasm_support": "Native"
    }
  ],
  "objects": [
    {
      "name": "object.get",
      "usage": "output := object.get(object, x, y)",
      "description": "`output` is the value stored by the `object` at key `x`. If no value is found, the default value `y` is returned",
      "wasm_support": "SDK"
    },
    {
      "name": "object.remove",
      "usage": "output := object.remove(object, array_or_set_or_object)",
      "description": "`output` is a new object which is the result of removing the keys specified in `array_or_set_or_object` from `object`. The keys must be either an array, set, or object of keys",
      "wasm_support": "SDK"
    },
    {
      "name": "object.union",
      "usage": "output := object.union(object, object)",
      "description": "`output` is a new object which is the result of an asymmetric recursive union of two objects where conflicts are resolved by choosing the key from the right-hand object. For example: `object.union({\"a\": 1, \"b\": 2, \"c\": {\"d\": 3}}, {\"a\": 7, \"c\": {\"d\": 4, \"e\": 5}})` will result in `{\"a\": 7, \"b\": 2, \"c\": {\"d\": 4, \"e\": 5}}`",
      "wasm_support": "SDK"
    },
    {
      "name": "object.filter",
      "usage": "output := object.filter(object, array_or_set_or_object)",
      "description": "`output` is a new object with the remaining data from `object` with only keys specified in `array_or_set_or_object` which is an array, set, or object of keys. For example: `object.filter({\"a\": {\"b\": \"x\", \"c\": \"y\"}, \"d\": \"z\"}, [\"a\"])` will result in `{\"a\": {\"b\": \"x\", \"c\": \"y\"}}`)",
      "wasm_support": "Native"
    },
    {
      "name": "json.filter",
      "usage": "output := json.filter(object, array_or_set)",
      "description": "`output` is the remaining data from `object` with only keys specified in `array_or_set` which is an array or set of JSON string paths. For example: `json.filter({\"a\": {\"b\": \"x\", \"c\": \"y\"}}, [\"a/b\"])` will result in `{\"a\": {\"b\": \"x\"}}`). Paths are not filtered in-order and are deduplicated before being evaluated",
      "wasm_support": "SDK"
    },
    {
      "name": "json.remove",
      "usage": "output := json.remove(object, array_or_set)",
      "description": "`output` is a new object which is the result of removing all keys specified in `array_or_set` which is an array or set of JSON string paths. For example: `json.remove({\"a\": {\"b\": \"x\", \"c\": \"y\"}}, [\"a/b\"])` will result in `{\"a\": {\"c\": \"y\"}}`. Paths are not removed in-order and are deduplicated before being evaluated",
      "wasm_support": "SDK"
    }
  ],
  "sets": [
    {
      "name": "and",
      "usage": "z := x \u0026 y",
      "description": "``z`` is the intersection of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "or",
      "usage": "z := x | y",
      "description": "``z`` is the union of ``x`` and ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "set_diff",
      "usage": "z := x - y",
      "description": "``z`` is the difference between ``x`` and ``y``, i.e., the elements in ``x`` that are not in ``y``",
      "wasm_support": "Native"
    },
    {
      "name": "intersection",
      "usage": "output := intersection(set)",
      "description": "``output`` is the intersection of the sets in the input set",
      "wasm_support": "Native"
    },
    {
      "name": "union",
      "usage": "output := union(set)",
      "description": "``output`` is the union of the sets in the input set",
      "wasm_support": "Native"
    }
  ],
  "strings": [
    {
      "name": "concat",
      "usage": "output := concat(x, array_or_set)",
      "description": "`output` is the result of joining together the elements of `array_or_set` with the delimiter specified by string `x`",
      "wasm_support": "Native"
    },
    {
      "name": "contains",
      "usage": "contains(x, y)",
      "description": "true if string `x` contains `y`",
      "wasm_support": "Native"
    },
    {
      "name": "startswith",
      "usage": "startswith(x, y)",
      "description": "true if string `x` begins with `y`",
      "wasm_support": "Native"
    },
    {
      "name": "endswith",
      "usage": "endswith(x, y)",
      "description": "true if string `x` ends with `y`",
      "wasm_support": "Native"
    },
    {
      "name": "format_int",
      "usage": "output := format_int(x, y)",
      "description": "`output` is string representation of number `x` in the given base `y`",
      "wasm_support": "Native"
    },
    {
      "name": "indexof",
      "usage": "output := indexof(x, y)",
      "description": "`output` is the index inside string `x` where `y` first occurs, or -1 if `y` does not exist",
      "wasm_support": "Native"
    },
    {
      "name": "substring",
      "usage": "output := substring(x, y, z)",
      "description": "`output` is the portion of string `x` from index `y` and having a length of `z`. If `z` is less than zero, `z` is the remainder of the string. If index `y` is greater than the length of the string, `output` is empty. It is invalid to pass a negative offset to this function.",
      "wasm_support": "Native"
    },
    {
      "name": "lower",
      "usage": "output := lower(x)",
      "description": "`output` is string `x` after converting to lower case",
      "wasm_support": "Native"
    },
    {
      "name": "upper",
      "usage": "output := upper(x)",
      "description": "`output` is string `x` after converting to upper case",
      "wasm_support": "Native"
    },
    {
      "name": "split",
      "usage": "output := split(x, y)",
      "description": "`output` is `array[string]` representing elements of string `x` separated by delimiter `y`",
      "wasm_support": "Native"
    },
    {
      "name": "replace",
      "usage": "output := replace(x, y, z)",
      "description": "`output` is a `string` representing string `x` with all instances of `y` replaced by `z`",
      "wasm_support": "Native"
    },
    {
      "name": "strings.replace_n",
      "usage": "output := strings.replace_n(object, x)",
      "description": "`object` is an object with old, new string key value pairs (e.g. {\"old1\": \"new1\", \"old2\": \"new2\", ...}). `output` is a `string` with all old strings inside `object` replaced by the new strings",
      "wasm_support": "Native"
    },
    {
      "name": "trim",
      "usage": "output := trim(x, y)",
      "description": "`output` is a string representing string `x` with all leading and trailing instances of the characters in `y` removed",
      "wasm_support": "Native"
    },
    {
      "name": "trim_left",
      "usage": "output := trim_left(x, y)",
      "description": "`output` is a string representing string `x` with all leading instances of the characters in `y` removed",
      "wasm_support": "Native"
    },
    {
      "name": "trim_prefix",
      "usage": "output := trim_prefix(x, y)",
      "description": "`output` is a `string` representing string `x` with leading instance of prefix `y` removed. If `x` doesn't start with `y`, `x` is returned unchanged",
      "wasm_support": "Native"
    },
    {
      "name": "trim_right",
      "usage": "output := trim_right(x, y)",
      "description": "`output` is a string representing string `x` with all trailing instances of the characters in `y` removed",
      "wasm_support": "Native"
    },
    {
      "name": "trim_suffix",
      "usage": "output := trim_suffix(x, y)",
      "description": "`output` is a `string` representing string `x` with trailing instance of suffix `y` removed. If `x` doesn't end with `y`, `x` is returned unchanged",
      "wasm_support": "Native"
    },
    {
      "name": "trim_space",
      "usage": "output := trim_space(x)",
      "description": "`output` is a `string` representing string `x` with all leading and trailing white space removed",
      "wasm_support": "Native"
    },
    {
      "name": "sprintf",
      "usage": "output := sprintf(x, array)",
      "description": "`output` is a string representing string `x` formatted by the values in `array`",
      "wasm_support": "SDK"
    }
  ]
}
